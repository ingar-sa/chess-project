// Test for all legal moves and checks 
List of tiles 

During the check of what moves might set the players king in check,
when we check the player's king's move, we have to update the position of the tile
that contains the king so that black will look for that

for tile in list of tiles:
    tile/piece -> legal moves for the specific tile/piece 
    -> adds to hashmap of ints/tiles 






//Knight

moves<int[]> = {[1, -2], [2, -1]}

for (int[] xy : moves) {
    moves.add()
}

















//Piece the player wants to move
Person clicks on a tile in GUI -> 
interface calls getTile() in PlayerMove to get tile ->
if there is a piece on the tile ->
check if piece matches player color ->
check all valid moves and attacks, then display on GUI

//Check for valid moves


private void pawnMoves(int row, int col) {
    if player color is white {
        move direction sign is 1
    }
    else {
        move direction sign = -1
    }

    int[][] validMoveCoordinates = new int[4][2];

    int moveDistance = 1;
    if (!hasMoved) moveDistance = 2;

    if white {
    check if boardTiles[row + 1][col] && boardTiles[row + 2][col] is isOccupied;
    }
    if black {
    check if boardTiles[row - 1][col] && boardTiles[row - 2][col] is isOccupied;
    }
    if (!hasMoved) {
        add row + 1 and row + 2;
    }
    else {
        add only row + 1;
    }

    //Attack

    check if boardTiles[row + 1][col + 1] and  boardTiles[row + 1][col - 1] isOccupied;
    if (true) {
        add coordinates;
    }
}

private void validKingMoves() {

}

//Move the player wants to make

if the tile that is clicked is not a valid tile -> 
    if the tile is another of the player's pieces ->
        run the "piece the player wants to move"-code
    else ->
        do nothing
         
else (if the tile is a valid move)->
    call movePiece method
    end the turn



//Method logic pseudocode
private Tile getTile(int row, int col) {
    return boardTiles[row][col]
}

private void MoveHandler() {
    Tile tileFrom = getTile(input from user interface);
    Piece piece;

    if (tile.isOccupied()) {
        piece = tile.getPiece
    }
}

private void checkMate() {
    if (no valid moves for king) ->
        for (all player in chekc's pieces) ->

}



//Piece the player wants to move
Person clicks on a tile in GUI -> 
interface calls getTile() in PlayerMove to get tile ->
if there is a piece on the tile ->
check if piece matches player color ->
check all valid moves and attacks, then display on GUI

//Check for valid moves


private void pawnMoves(int row, int col) { [ [1,2]]
    int[][] validMoves

    int moveDistance = 1;
    if (!hasMoved) moveDistance = 2;

    if (!hasMoved) {
        check if boardTiles[row][col + 1] && boardTiles[row][col + 2] is isOccupied;
    }



}

private void validKingMoves() {

}

//Move the player wants to make

if the tile that is clicked is not a valid tile -> 
    if the tile is another of the player's pieces ->
        rune the "piece the player wants to move"-code
    else ->
        do nothing
         
else (if the tile is a valid move)->
    call movePiece method
    end the turn



//Method logic pseudocode
private Tile getTile(int row, int col) {
    return boardTiles[row][col]
}

private void MoveHandler() {
    Tile tileFrom = getTile(input from user interface);
    Piece piece;

    if (tile.isOccupied()) {
        piece = tile.getPiece
    }
}

private void checkMate() {
    if (no valid moves for king) ->
        for (all player in chekc's pieces) ->

}
